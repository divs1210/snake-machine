;; Analyzed by ClojureScript 0.0-3308
{:use-macros nil, :excludes #{}, :name snake-cljs.core, :imports nil, :requires {q quil.core, quil.core quil.core, m quil.middleware, quil.middleware quil.middleware}, :uses nil, :defs {draw-frog {:protocol-inline nil, :meta {:file "/home/redpanda/clojure/snake-cljs/src/snake_cljs/core.cljs", :line 58, :column 7, :end-line 58, :end-column 16, :arglists (quote ([frog]))}, :name snake-cljs.core/draw-frog, :variadic false, :file "src/snake_cljs/core.cljs", :end-column 16, :method-params ([frog]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 1, :fn-var true, :arglists (quote ([frog]))}, draw-state {:protocol-inline nil, :meta {:file "/home/redpanda/clojure/snake-cljs/src/snake_cljs/core.cljs", :line 105, :column 7, :end-line 105, :end-column 17, :arglists (quote ([state]))}, :name snake-cljs.core/draw-state, :variadic false, :file "src/snake_cljs/core.cljs", :end-column 17, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 105, :end-line 105, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, update-state {:protocol-inline nil, :meta {:file "/home/redpanda/clojure/snake-cljs/src/snake_cljs/core.cljs", :line 94, :column 7, :end-line 94, :end-column 19, :arglists (quote ([state]))}, :name snake-cljs.core/update-state, :variadic false, :file "src/snake_cljs/core.cljs", :end-column 19, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 94, :end-line 94, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, make-snake {:protocol-inline nil, :meta {:file "/home/redpanda/clojure/snake-cljs/src/snake_cljs/core.cljs", :line 33, :column 7, :end-line 33, :end-column 17, :arglists (quote ([]))}, :name snake-cljs.core/make-snake, :variadic false, :file "src/snake_cljs/core.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, quil-test {:protocol-inline nil, :meta {:file "/home/redpanda/clojure/snake-cljs/src/snake_cljs/core.cljs", :line 110, :column 14, :end-line 110, :end-column 23, :export true, :arglists (quote ([]))}, :name snake-cljs.core/quil-test, :variadic false, :file "src/snake_cljs/core.cljs", :end-column 23, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 110, :end-line 110, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, draw-snake {:protocol-inline nil, :meta {:file "/home/redpanda/clojure/snake-cljs/src/snake_cljs/core.cljs", :line 52, :column 7, :end-line 52, :end-column 17, :arglists (quote ([snake]))}, :name snake-cljs.core/draw-snake, :variadic false, :file "src/snake_cljs/core.cljs", :end-column 17, :method-params ([snake]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 1, :fn-var true, :arglists (quote ([snake]))}, grow-snake {:protocol-inline nil, :meta {:file "/home/redpanda/clojure/snake-cljs/src/snake_cljs/core.cljs", :line 68, :column 7, :end-line 68, :end-column 17, :arglists (quote ([snake]))}, :name snake-cljs.core/grow-snake, :variadic false, :file "src/snake_cljs/core.cljs", :end-column 17, :method-params ([snake]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 1, :fn-var true, :arglists (quote ([snake]))}, add-points {:protocol-inline nil, :meta {:file "/home/redpanda/clojure/snake-cljs/src/snake_cljs/core.cljs", :line 21, :column 7, :end-line 21, :end-column 17, :arglists (quote ([p1 p2]))}, :name snake-cljs.core/add-points, :variadic false, :file "src/snake_cljs/core.cljs", :end-column 17, :method-params ([p1 p2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p1 p2]))}, scale-point {:protocol-inline nil, :meta {:file "/home/redpanda/clojure/snake-cljs/src/snake_cljs/core.cljs", :line 27, :column 7, :end-line 27, :end-column 18, :arglists (quote ([point]))}, :name snake-cljs.core/scale-point, :variadic false, :file "src/snake_cljs/core.cljs", :end-column 18, :method-params ([point]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists (quote ([point]))}, env {:name snake-cljs.core/env, :file "src/snake_cljs/core.cljs", :line 7, :column 1, :end-line 7, :end-column 9, :meta {:file "/home/redpanda/clojure/snake-cljs/src/snake_cljs/core.cljs", :line 7, :column 6, :end-line 7, :end-column 9}}, make-frog {:protocol-inline nil, :meta {:file "/home/redpanda/clojure/snake-cljs/src/snake_cljs/core.cljs", :line 38, :column 7, :end-line 38, :end-column 16, :arglists (quote ([]))}, :name snake-cljs.core/make-frog, :variadic false, :file "src/snake_cljs/core.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, rand-int-in {:protocol-inline nil, :meta {:file "/home/redpanda/clojure/snake-cljs/src/snake_cljs/core.cljs", :line 18, :column 7, :end-line 18, :end-column 18, :arglists (quote ([max]))}, :name snake-cljs.core/rand-int-in, :variadic false, :file "src/snake_cljs/core.cljs", :end-column 18, :method-params ([max]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 1, :fn-var true, :arglists (quote ([max]))}, rand-color {:protocol-inline nil, :meta {:file "/home/redpanda/clojure/snake-cljs/src/snake_cljs/core.cljs", :line 15, :column 7, :end-line 15, :end-column 17, :arglists (quote ([]))}, :name snake-cljs.core/rand-color, :variadic false, :file "src/snake_cljs/core.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, key-press {:protocol-inline nil, :meta {:file "/home/redpanda/clojure/snake-cljs/src/snake_cljs/core.cljs", :line 75, :column 7, :end-line 75, :end-column 16, :arglists (quote ([state e]))}, :name snake-cljs.core/key-press, :variadic false, :file "src/snake_cljs/core.cljs", :end-column 16, :method-params ([state e]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state e]))}, setup {:protocol-inline nil, :meta {:file "/home/redpanda/clojure/snake-cljs/src/snake_cljs/core.cljs", :line 89, :column 7, :end-line 89, :end-column 12, :arglists (quote ([]))}, :name snake-cljs.core/setup, :variadic false, :file "src/snake_cljs/core.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 89, :end-line 89, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, draw-block {:protocol-inline nil, :meta {:file "/home/redpanda/clojure/snake-cljs/src/snake_cljs/core.cljs", :line 47, :column 7, :end-line 47, :end-column 17, :arglists (quote ([block]))}, :name snake-cljs.core/draw-block, :variadic false, :file "src/snake_cljs/core.cljs", :end-column 17, :method-params ([block]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 1, :fn-var true, :arglists (quote ([block]))}, make-game {:protocol-inline nil, :meta {:file "/home/redpanda/clojure/snake-cljs/src/snake_cljs/core.cljs", :line 42, :column 7, :end-line 42, :end-column 16, :arglists (quote ([]))}, :name snake-cljs.core/make-game, :variadic false, :file "src/snake_cljs/core.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, eating? {:protocol-inline nil, :meta {:file "/home/redpanda/clojure/snake-cljs/src/snake_cljs/core.cljs", :line 71, :column 7, :end-line 71, :end-column 14, :arglists (quote ([snake frog]))}, :name snake-cljs.core/eating?, :variadic false, :file "src/snake_cljs/core.cljs", :end-column 14, :method-params ([snake frog]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 71, :max-fixed-arity 2, :fn-var true, :arglists (quote ([snake frog]))}}, :require-macros {q quil.core, quil.core quil.core}, :cljs.analyzer/constants {:seen #{:features :block-size :down :fn :dir :key :snake :width :update :up :size :title :setup :middleware :frog :host :key-pressed :keep-on-top :right :host-id :no-start :draw :body :can-turn? :height :left}, :order [:block-size :width :height :body :dir :can-turn? :snake :frog :key :up :down :left :right :features :keep-on-top :update :size :title :setup :middleware :host :key-pressed :draw :no-start :fn :host-id]}, :doc nil}